name: Builds
on:
  push:
    branches:
      - 'wip'
  pull_request:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: read

jobs:
  # For scheduled builds, get the commit ids of the latest versions to build.
  #
  # Doing this as one single job, which then propagates the information further
  # to the other jobs, so that all build jobs in one workflow builds the exact
  # same version. This allows trusting builds without assertions enabled
  # slightly more, when we know a separate build of the same version but with
  # assertions enabled, has passed some amount of tests.
  prepare:
    if: (github.event_name != 'schedule') || (github.repository == 'mstorsjo/llvm-mingw')
    runs-on: ubuntu-latest
    outputs:
      LLVM_VERSION: ${{steps.get-versions.outputs.LLVM_VERSION}}
      MINGW_W64_VERSION: ${{steps.get-versions.outputs.MINGW_W64_VERSION}}
      PYTHON_VERSION_MINGW: ${{steps.get-versions.outputs.PYTHON_VERSION_MINGW}}
      TAG: ${{steps.get-tag.outputs.TAG}}
    steps:
      - name: Select build tag
        id: get-tag
        run: |
          if ${{github.event_name == 'schedule'}}; then
              TAG=nightly
          else
              TAG=$(TZ=UTC date +%Y%m%d)
          fi
          echo TAG=$TAG >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT >> parameters.txt
      - name: Check latest version
        if: github.event_name == 'schedule'
        id: get-versions
        run: |
          echo LLVM_VERSION=$(git ls-remote https://github.com/llvm/llvm-project.git | grep 'refs/heads/main$' | awk '{print $1}') >> $GITHUB_OUTPUT
          echo MINGW_W64_VERSION=$(git ls-remote https://github.com/mingw-w64/mingw-w64.git | grep 'refs/heads/master$' | awk '{print $1}') >> $GITHUB_OUTPUT
          echo PYTHON_VERSION_MINGW=$(git ls-remote https://github.com/msys2-contrib/cpython-mingw.git | grep 'refs/heads/mingw-v3.11.6$' | awk '{print $1}') >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT >> parameters.txt
      - uses: actions/upload-artifact@v3
        with:
          name: parameters
          path: |
            parameters.txt
          retention-days: 7

  # Build a cross compiler for Linux, targeting Windows.
  linux:
    if: (github.event_name != 'schedule') || (github.repository == 'mstorsjo/llvm-mingw')
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        env:
          LLVM_VERSION: ${{needs.prepare.outputs.LLVM_VERSION}}
          MINGW_W64_VERSION: ${{needs.prepare.outputs.MINGW_W64_VERSION}}
          TAG: ${{needs.prepare.outputs.TAG}}
        run: |
          sudo apt-get update && sudo apt-get install git clang cmake ca-certificates ninja-build make llvm python3 lld python3-distutils
          sudo apt-get install libunwind-$(echo "__clang_major__" | clang -E -P -x c -)-dev
          # Skip dynamic library dependencies that might make it harder to
          # run the binaries on other distros (and that have little use within
          # llvm-mingw).
          ./build-all.sh $(pwd)/install/llvm-mingw --host-clang --disable-clang-tools-extra
          .github/workflows/store-version.sh install/llvm-mingw/versions.txt
          DISTRO=ubuntu-$(grep DISTRIB_RELEASE /etc/lsb-release | cut -f 2 -d =)-$(uname -m)
          NAME=llvm-mingw-$TAG-ucrt-$DISTRO-system
          tar -Jcf $NAME.tar.xz -C install --format=ustar --sort=name --numeric-owner --owner=0 --group=0 --transform="s,^\./\.,${NAME},S" ./.
          RUN_I686=false RUN_X86_64=false ./run-tests.sh $(pwd)/install/llvm-mingw
      - uses: actions/upload-artifact@v3
        with:
          name: linux-ucrt-x86_64-toolchain
          path: |
            llvm-mingw-*.tar.xz
          retention-days: 7
